include "helpers.porth"

const DEBUG false end
const CELL_SIZE sizeof(int) end
const N 1000 end // input looks to only go up to 1000x1000
memory board CELL_SIZE N N * * end
memory diagonals CELL_SIZE N N * * end
proc board[i] int -- ptr in board a[i] end
proc !board[i] int int in board !a[i] end
proc @board[i] int -- int in board @a[i] end

memory input sizeof(Str) end
memory line sizeof(Str) end
proc @line -- int ptr in line @Str end
proc len(line) -- int in line @Str.count end
memory word sizeof(Str) end
proc @word -- int ptr in word @Str end
proc len(word) -- int in word @Str.count end
memory digit sizeof(Str) end
proc @digit -- int ptr in digit @Str end
proc len(digit) -- int in digit @Str.count end
read_stdin_to_str @Str input !Str

proc set_line in
  word line str-chop-word
  ',' digit word str-chop-by-delim @digit try-parse-int drop
  @word try-parse-int drop
  2dup N * +
  // x1 y1 idx1
  rot rot swap
  // idx1 y1 x1
  word line str-chop-word // Skip the "->" token
  word line str-chop-word
  ',' digit word str-chop-by-delim @digit try-parse-int drop
  // idx1 y1 x1 x2
  dup rot = swap rot
  // idx1 same_col? x2 y1
  @word try-parse-int drop
  // idx1 col? x2 y1 y2
  dup rot = swap rot
  // idx1 col? same_row? y2 x2
  swap N * +
  // idx1 col? row? idx2
  rot rot
  // idx1 idx2 col? row?
  if // same column, so move by chunks of N
    // idx1 idx2 row?
    rot rot
    // row? idx1 idx2
    min_max
    // row? idx1 idx2  -- (idx1 < idx2)
    while 2dup <= do
      // row? idx1 idx2
      dup @board[i] 1 + over !board[i]
      1 -
    end
    // row? idx1 idx2
    rot
    // idx1 idx2 row?
    drop
  else if* // same row, so move just by 1
    // idx1 idx2
    min_max
    // idx1 idx2  -- (idx1 < idx2)
    while 2dup <= do
      dup @board[i] 1 + over !board[i]
      N -
    end
    // idx1 idx2
  else // part 2, diaganol
    // idx1 idx2
    // work out which way the line is going
    min_max // always go up in y (chunks of N)
    over N % over N %
    // idx1 idx2 x1 x2
    > if // we should increment x
      while 2dup <= do
        dup diagonals @a[i] 1 + over diagonals !a[i]
        N - 1 +
      end
    else // we should decrement x
      while 2dup <= do
        dup diagonals @a[i] 1 + over diagonals !a[i]
        N - 1 -
      end
    end
    // idx1 idx2
  end
  drop drop
end

proc dump-board in
  "Board State: \n" puts
  0 while dup N < do
    // y
    0 while dup N < do
      // y x
      2dup swap N * + @board[i] dup 0 = if drop "." puts else putu end
      1 +
    end drop
    "\n" puts
    1 +
  end drop
end

while line input str-chop-line len(line) 0 > do
  set_line
end
DEBUG if dump-board end
0
// sum
N N * while dup 0 > do
  // sum cell
  dup @board[i] 2 >= if swap 1 + swap end
  1 -
end drop
print
0
// sum
N N * while dup 0 > do
  // sum cell
  dup @board[i] over diagonals @a[i] + 2 >= if swap 1 + swap end
  1 -
end drop
print
