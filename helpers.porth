include "std.porth"

// STACK
proc 2dup int int -- int int int int in over over end
proc 2drop int int -- in drop drop end

// STRINGS
const sizeof(char) 1 end

memory stdin_cstr 100000 end
proc read_stdin_to_str -- ptr in
  memory ret sizeof(Str) end
  memory buffer 1024 end
  stdin_cstr ret !Str.data
  0 while // stk: len
    drop 1024 buffer stdin read
    dup 0 >
  do
    0 while 2dup > do // stk: len idx
      dup buffer +ptr @8
      ret @Str.count ret @Str.data +ptr !8
      ret Str.count inc64
      1 +
    end drop
  end drop
  ret
end

proc str-chop-line ptr ptr in // stk: dst src
  '\n' rot rot str-chop-by-delim
end

proc str-chop-word ptr ptr in // stk: dst src
  ' ' rot rot str-chop-by-delim
end

proc str-contains int ptr -- bool in
  memory s sizeof(Str) end
  @Str s !Str
  false // stk: search ret
  while dup lnot s @Str.count 0 > land do
    over s @Str.data @8 = if drop true end
    s str-chop-one-left
  end
  swap drop
end

proc str-len-diff ptr ptr -- int in // stk: a b -> len
  // Returns length of b if all chars from a are removed from b
  // Doesn't modify either string
  memory a sizeof(Str) end
  memory b sizeof(Str) end
  @Str b !Str
  @Str a !Str
  a @Str.count // stk: len
  while b @Str.count 0 > do
    b @Str.data @8 a str-contains if 1 - end
    b str-chop-one-left
  end
end

proc newline in "\n" puts end

proc isupper int -- bool in
  dup
    'A' >=
  swap
    'Z' <=
  land
end

// EXE

proc exe_fork ptr ptr in // argv file
  memory wstatus sizeof(u64) end
  memory empty_envp sizeof(ptr) end
  0 empty_envp !64

  memory argvp sizeof(ptr) end
  argvp !64

  memory file-path sizeof(ptr) end
  file-path !64

  fork
  dup 0 = if // In child
    drop
    empty_envp
    argvp @ptr
    file-path @ptr
    execve drop
    "execve(2) failed\n" eputs
  else dup 0 > if*
    drop
    NULL
    0
    wstatus
    0 1 - // TODO: replace this with -1 when we support negative numbers
    wait4 0 < if
      "[ERROR] could not wait until the child process has finished executing\n" eputs
      1 exit
    end
  else
    drop
    "[ERROR] could not fork a child\n" eputs
    1 exit
  end
end

// TERMINAL COLORS

proc font_tput_term_arg -- ptr in
  memory term_arg sizeof(int) 50 * end // Shouldn't have larger
  "-T" term_arg cstr-to-str str-starts-with if
    // Already computed
  else
    "TERM" getenv
    dup NULL ptr= over cstrlen 0 = lor if
      drop "linux"c // Set a default TERM
    end
    dup cstrlen 1 + dup 50 >= if
      here eputs " Overflow in setting $TERM\n" eputs
      1 exit
    end
    "-T" term_arg memcpy drop
    swap 2 term_arg +ptr memcpy drop
  end
  term_arg
end

proc font_bold in
  memory argvp sizeof(ptr) 4 * end
  "/usr/bin/tput"c argvp 0 8 * ptr+ !ptr
  font_tput_term_arg argvp 1 8 * ptr+ !ptr
  "bold"c argvp 2 8 * ptr+ !ptr
  NULL argvp 3 8 * ptr+ !ptr
  argvp @ptr argvp exe_fork
end

proc font_red in
  memory argvp sizeof(ptr) 5 * end
  "/usr/bin/tput"c argvp 0 8 * ptr+ !ptr
  font_tput_term_arg argvp 1 8 * ptr+ !ptr
  "setaf"c argvp 2 8 * ptr+ !ptr
  "160"c argvp 3 8 * ptr+ !ptr
  NULL argvp 4 8 * ptr+ !ptr
  argvp @ptr argvp exe_fork
end

proc font_reset in
  memory argvp sizeof(ptr) 4 * end
  "/usr/bin/tput"c argvp 0 8 * ptr+ !ptr
  font_tput_term_arg argvp 1 8 * ptr+ !ptr
  "sgr0"c argvp 2 8 * ptr+ !ptr
  NULL argvp 3 8 * ptr+ !ptr
  argvp @ptr argvp exe_fork
end

// ARRAYS, you have to keep track of length
proc a[i] int ptr -- ptr in
  swap sizeof(int) * swap +ptr
end

proc !a[i]
    int int ptr // val idx a
  in
  a[i] !64
end

proc @a[i]
    int ptr // idx a
    --
    int     // val
  in
  a[i] @64
end

proc a[i]++ int ptr in // idx a
  a[i] dup @64 1 + swap !64
end

// MATH
// FIXME: porth.py supports -1, porth.porth does not. .py doesn't allow following proc, .porth does
// proc -1 -- int in 0 1 - end

proc min_max int int -- int int in
  2dup
  max swap
  // a max b
  2dup = if
    drop
    // a max  --  (b=max)
  else
    swap rot drop
    // b max  --  (b!=max)
  end
end

proc abs int -- int in
  dup 0 < if 0 1 - * end
end

// My custom std
include "std/stack.porth"
include "std/list.porth"
include "std/map.porth"
