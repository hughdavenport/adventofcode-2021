include "helpers.porth"

memory input sizeof(Str) end
proc len(input) -- int in input @Str.count end
memory line sizeof(Str) end
proc @line -- int ptr in line @Str end
proc len(line) -- int in line @Str.count end

const ALPHA_SIZE 26 end
proc idx int int -- int in ALPHA_SIZE * + end
memory pairs sizeof(int) ALPHA_SIZE ALPHA_SIZE * * end
memory mappings sizeof(int) ALPHA_SIZE ALPHA_SIZE * * end
memory last_char sizeof(int) end

proc count_pairs -- int in
  memory ret sizeof(int) end
  1 ret !64
  0 while dup ALPHA_SIZE < do
    0 while dup ALPHA_SIZE < do
      2dup idx pairs @a[i]
      ret @64 + ret !64
      1 +
    end drop
    1 +
  end drop
  ret @64
end

proc solution -- int in
  memory acc sizeof(int) ALPHA_SIZE * end
  sizeof(int) ALPHA_SIZE * 0 acc memset drop
  0 while dup ALPHA_SIZE < do
    0 while dup ALPHA_SIZE < do
      2dup idx pairs @a[i]
      dup 0 != if
        rot 2dup acc @a[i] + over acc !a[i] rot rot
      end drop
      1 +
    end drop
    1 +
  end drop
  memory mi sizeof(int) end
  memory ma sizeof(int) end
  0 acc @a[i] dup mi !64 ma !64
  1 while dup ALPHA_SIZE < do
    dup acc @a[i] over last_char @64 = if 1 + end
    dup 0 != if
      dup mi @64 < mi @64 0 = lor if dup mi !64 end
      dup ma @64 > if dup ma !64 end
    end
    drop
    1 +
  end drop
  ma @64 mi @64 -
end

proc dump_pairs in
  "PAIRS:\n" puts
  "Length: " puts count_pairs print
  "       " puts 'A' while dup 'Z' <= do dup putc "  " puts 1 + end drop newline
  "       " puts 'A' while dup 'Z' <= do "---" puts 1 + end drop newline
  memory acc sizeof(int) ALPHA_SIZE * end
  sizeof(int) ALPHA_SIZE * 0 acc memset drop
  0 while dup ALPHA_SIZE < do
    dup 'A' + putc ":     " puts
    0 while dup ALPHA_SIZE < do
      2dup idx pairs @a[i]
      dup 0 != if
        rot 2dup acc @a[i] + over acc !a[i] rot rot
      end
      dup 0 = if "   " puts else dup putu dup 100 < if " " puts end dup 10 < if " " puts end end drop
      1 +
    end drop
    newline
    1 +
  end drop
  newline
  "TOTAL: " puts
  0 while dup ALPHA_SIZE < do
    dup acc @a[i] over last_char @64 = if 1 + end dup 0 = if drop " " puts else putu end "  " puts
    1 +
  end drop
  newline
end

proc dump_mappings in
  "MAPPINGS:\n" puts
  "   " puts 'A' while dup 'Z' <= do dup putc " " puts 1 + end drop newline
  "   " puts 'A' while dup 'Z' <= do "--" puts 1 + end drop newline
  0 while dup ALPHA_SIZE < do
    dup 'A' + putc ": " puts
    0 while dup ALPHA_SIZE < do
      2dup idx mappings @a[i]
      dup 0 = if "  " puts else dup 'A' + putc " " puts end drop
      1 +
    end drop
    newline
    1 +
  end drop
end

read_stdin_to_str @Str input !Str
line input str-chop-line
while len(line) 1 > do
  line @Str.data @8 'A' -
  line str-chop-one-left
  line @Str.data @8 'A' -
  dup last_char !64
  2dup idx dup pairs @a[i] 1 + swap pairs !a[i]
  2drop
end

line input str-chop-line // swallow blank line

while len(input) 0 > do
  input @Str.data @8 'A' -
  input str-chop-one-left
  input @Str.data @8 'A' -
  input str-chop-one-left
  idx
  0 while dup 4 < do input str-chop-one-left 1 + end drop // the " -> "
  input @Str.data @8 'A' -
  input str-chop-one-left
  swap mappings !a[i]
  input str-chop-one-left // the newline char
end

//dump_mappings
//dump_pairs

memory copy sizeof(int) ALPHA_SIZE ALPHA_SIZE * * end
memory x sizeof(int) end
memory y sizeof(int) end
0 while dup 40 < do
  sizeof(int) ALPHA_SIZE ALPHA_SIZE * * pairs copy memcpy drop
  0 y !64
  while y @64 ALPHA_SIZE < do
    0 x !64
    while x @64 ALPHA_SIZE < do
      y @64 x @64 idx // idx
      dup copy @a[i] // idx pairs[idx]=p
      dup 0 > if
        over mappings @a[i] // idx p mappings[idx]=m
//        rot dup "At index " puts putu rot dup " with cur of " puts putu rot dup " - " puts y @64 'A' + putc x @64 'A' + putc " -> " puts 'A' + putc newline
        // x,m and m,y should increment by p
        swap over x @64 idx dup rot swap over swap pairs @a[i] + rot pairs !a[i] swap
        swap over y @64 swap idx dup rot swap over swap pairs @a[i] + rot pairs !a[i] swap
        // x,y should should decrement by p
        swap rot 2dup dup pairs @a[i] rot - swap pairs !a[i] swap rot
        drop
      end 2drop
      x inc64
    end
    y inc64
  end
//  dump_pairs

//  "After step " puts dup 1 + putu " the length is " puts count_pairs print
  1 +
  dup 10 = if
    solution print
  end
end
//"After step " puts dup putu " the length is " puts count_pairs print
drop
solution print
