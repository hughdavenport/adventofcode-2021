include "helpers.porth"

memory last2 sizeof(int) end
memory counter sizeof(int) end
memory window_sum sizeof(int) end
memory window_counter sizeof(int) end

0
while eof? lnot do
  // last
  parse_int_from_buffer swap
  // num last
  dup 0 != if // has previous measurement

    // BEGIN PART 1
    2dup > if counter @64 1 + counter !64 end
    // END PART 1

    // BEGIN PART 2
    // num last
    2dup + last2 @64
    // num last (sum-last2) last2
    dup 0 = if 2drop // haven't filled window yet
    else
      + window_sum @64
      // num last sum last_sum
      dup 0 = if drop // no previous sum
      else
        over < if window_counter @64 1 + window_counter !64 end
      end
      // num last sum
      window_sum !64
    end
    // END PART 2

    // num last
  end
  // num last (-> last2 last)
  last2 !64
  // last
end drop

counter @64 print
window_counter @64 print
