include "helpers.porth"

memory input sizeof(Str) end
proc len(input) -- int in input @Str.count end
memory bits sizeof(List) end
sizeof(int) bits list_init
memory bits_read sizeof(int) end
0 bits_read !64
memory read_block sizeof(bool) end
false read_block !bool

proc dump_bits in
  "Read so far: " puts bits_read @64 putu ", " puts
  "In buffer: " puts bits @List.count putu ", " puts
  bits list_dump
end

proc parse_nibble in
  read_block @bool lnot if
    input @Str.data @8
    input str-chop-one-left
    dup isdigit if
      '0' -
    else dup isalpha if*
      'A' - 10 +
    else drop 0
    end
    0 while dup 4 < do 0 bits list_add 1 + end drop
    0 while dup 4 < do
      swap 2 divmod rot swap over bits @List.count 1 - swap - bits list_set
      1 +
    end drop
    drop
  end
end

proc read_bits int -- int in
  dup bits_read @64 + bits_read !64
  while bits @List.count over <=
      input @Str.count 0 > land
      read_block @bool lnot land do
    parse_nibble
  end
  0
  while over 0 >
      bits @List.count 0 > land do
    2 *
    0 bits list_remove 1 = if
      1 +
    end
    swap 1 - swap
  end
  over bits_read @64 swap - bits_read !64
  swap drop
end

proc read_literal -- int in
  0
  while 1 read_bits 1 = do
    16 * 4 read_bits +
  end
  16 * 4 read_bits +
end

memory indent sizeof(int) end
0 indent !64
proc print_indent in
  0 while dup indent @64 < do
    "  " puts
    1 +
  end drop
end
memory version_sum sizeof(int) end
0 version_sum !64
proc read_packet in
  memory version sizeof(int) end
  memory type sizeof(int) end
  3 read_bits version !64
  version @64 version_sum @64 + version_sum !64
//  print_indent "Version: " puts version @64 print
  3 read_bits type !64
  type @64 4 = if
//    print_indent "Literal: " puts
    read_literal
//    dup print
    drop
  else
    1 read_bits
//    print_indent "Operator type: " puts dup print
    0 = if
      15 read_bits
//      print_indent dup "Subpackets in " puts putu " bits\n" puts
      bits @List.count
      while over 0 > do
        parse_nibble
        swap 4 - swap
      end swap -
      true read_block !bool
      while dup bits @List.count < do
        indent inc64
        read_packet
        indent dec64
      end drop
      false read_block !bool
//      print_indent "Finished subpackets\n" puts
    else
      11 read_bits
      while dup 0 > do
        indent inc64
        read_packet
        indent dec64
        1 -
      end drop
    end
  end
end

read_stdin_to_str @Str input !Str
while len(input) 0 > do
  read_packet
end
// dump_bits
version_sum @64 print
