const LIST_CAP 100000 end
const MAX_LISTS 500 end
const offsetof(List.count) sizeof(u64) offset end
const offsetof(List.data_size) sizeof(u64) offset end
const offsetof(List.data) sizeof(ptr) offset end
const sizeof(List) reset end

proc List.count ptr -- ptr in offsetof(List.count) ptr+ end
proc List.data_size ptr -- ptr in offsetof(List.data_size) ptr+ end
proc List.data ptr -- ptr in offsetof(List.data) ptr+ end
proc @List.count ptr -- int in List.count @64 end
proc @List.data_size ptr -- int in List.data_size @64 end
proc @List.data ptr -- ptr in List.data  @64 cast(ptr) end
proc !List.count int ptr in List.count !64 end
proc !List.data_size int ptr in List.data_size !64 end
proc !List.data ptr ptr in List.data  !64 end

const sizeof(List.data) sizeof(int) LIST_CAP * end

memory lists sizeof(List.data) MAX_LISTS * end
memory freed sizeof(bool) MAX_LISTS * end
memory len(lists) sizeof(u64) end

proc list_init int ptr in
  NULL
  0 while dup len(lists) @64 < do
    dup sizeof(bool) * freed +ptr @bool if
      false over sizeof(bool) * freed +ptr !bool
      dup sizeof(List.data) * lists +ptr
      rot drop swap
      drop len(lists) @64 // break
    end
    1 +
  end drop
  dup NULL ptr= if
    drop
    len(lists) @64 MAX_LISTS = if
      here eputs " Overflow in list_init\n" eputs
      1 exit
    end
    len(lists) @64 sizeof(List.data) * lists +ptr
    len(lists) inc64
  end
  over !List.data
  0 over !List.count
  !List.data_size
end

proc list_free ptr in true swap @List.data lists ptr-diff sizeof(List.data) / sizeof(bool) * freed +ptr !bool end

proc list_empty? ptr -- bool in
  @List.count 0 =
end

proc list_data_for_idx int ptr -- ptr in
  swap over @List.data_size * swap @List.data +ptr
end

proc list_set int int ptr in
  over over swap dup 0 < rot rot swap @List.count >= lor if
    here eputs " Index Out Of Bounts in list_set\n" eputs
    1 exit
  end
  memory list sizeof(ptr) end
  memory val sizeof(int) end
  dup list !ptr
  list_data_for_idx
  list @ptr @List.data_size sizeof(int) = if
    !64
  else
    swap val !64
    0 while dup list @ptr @List.data_size < do // data_idx byte_idx
      val @64 over 8 * shr 255 and // data_idx byte_idx val
      rot swap over !8
      1 swap +ptr swap 1 +
    end drop drop
  end
end

proc list_get int ptr -- int in
  over over swap dup 0 < rot rot swap @List.count >= lor if
    here eputs " Index Out Of Bounts in list_get\n" eputs
    1 exit
  end
  memory list sizeof(ptr) end
  memory val sizeof(int) end
  dup list !ptr
  list_data_for_idx
  list @ptr @List.data_size sizeof(int) = if
    @64
  else
    0 val !64
    0 while dup list @ptr @List.data_size < do // data_idx byte_idx
      over @8 over 8 * shl val @64 or val !64
      swap 1 swap +ptr swap 1 +
    end drop drop
    val @64
  end
end

proc list_remove
  int ptr // idx list
  --
  int     // ret
    in
  memory _l sizeof(ptr) end
  _l !ptr
  _l @ptr @List.count 0 = if
    here eputs " Underflow in list_remove\n" eputs
    1 exit
  end
  dup 0 = if
    dup _l @ptr list_get swap
    1 _l @ptr list_data_for_idx _l @ptr !List.data
    _l @ptr List.count dec64
    drop
  else
    dup _l @ptr list_get swap // stk: ret idx
    while dup _l @ptr @List.count 1 - < do
      dup 1 + _l @ptr list_get over _l @ptr list_set
      1 +
    end drop
    _l @ptr List.count dec64
  end
end

proc list_insert
  int int ptr // val idx list
    in
  memory _l sizeof(ptr) end
  _l !ptr
  _l @ptr @List.count LIST_CAP = if
    here eputs " Overflow in list_insert\n" eputs
    1 exit
  end // stk: val idx
  _l @ptr List.count inc64
  _l @ptr @List.count 1 - while 2dup < do
    dup 1 - _l @ptr list_get over _l @ptr list_set
    1 -
  end drop
  _l @ptr list_set
end

proc list_add
  int ptr // val list
    in
  swap over // stk: list val list
  dup @List.count // stk: list val list count
  // TODO auto expand lists
  dup LIST_CAP = if
    here eputs " Overflow in list_add\n" eputs
    1 exit
  end // stk: list val list count
  swap List.count inc64
  rot list_set
end

proc list_copy ptr ptr in
  memory src sizeof(ptr) end
  memory dst sizeof(ptr) end
  src !ptr dst !ptr
  src @ptr @List.data_size dst @ptr list_init
  0 while dup src @ptr @List.count < do
    dup src @ptr list_get dst @ptr list_add
    1 +
  end drop
end

proc list_dump ptr in
  memory _l sizeof(ptr) end
  _l !ptr
  "List: " puts
//  "(" puts _l @ptr @List.data cast(int) putu ") " puts
  "[" puts
  0 while dup _l @ptr @List.count < do // stk : idx
    dup 0 != if ", " puts end
    dup _l @ptr list_get putu
    1 +
  end drop
  "]\n" puts
end

proc list_sort ptr in
  // Bubble sort adapted from examples/bubble-sort.porth
  // TODO Optimized solution
  memory _l sizeof(ptr) end
  _l !ptr
  memory i sizeof(u64) end
  _l @ptr @List.count 1 - i !64
  while i @64 1 > do
    0 while dup i @64 < do
      dup   _l @ptr list_get
      i @64 _l @ptr list_get
      > if
        dup   _l @ptr @List.data a[i]
        i @64 _l @ptr @List.data a[i]
        swap64
      end
      1 +
    end drop
    i dec64
  end
end

proc list_to_str ptr -- int ptr in
  dup @List.data_size 1 != if
    here eputs ": ERROR: Can't use list_to_str for lists of datasize != 1\n" eputs
    1 exit
  end
  dup @List.count swap @List.data
end

proc list_contains int ptr -- bool in
  memory list sizeof(ptr) end
  list !ptr
  memory val sizeof(int) end
  val !64
  false
  0 while dup list @ptr @List.count < do
    dup list @ptr list_get val @64 = if
      drop drop true list @ptr @List.count
    end
    1 +
  end drop
end
