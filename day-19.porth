include "helpers.porth"

memory input sizeof(Str) end
proc len(input) -- int in input @Str.count end
memory line sizeof(Str) end
proc @line -- int ptr in line @Str end
proc len(line) -- int in line @Str.count end
memory word sizeof(Str) end
proc @word -- int ptr in word @Str end
proc len(word) -- int in word @Str.count end

const offsetof(Beacon.orig_x) sizeof(int) offset end
const offsetof(Beacon.orig_y) sizeof(int) offset end
const offsetof(Beacon.orig_z) sizeof(int) offset end
const offsetof(Beacon.x) sizeof(int) offset end
const offsetof(Beacon.y) sizeof(int) offset end
const offsetof(Beacon.z) sizeof(int) offset end
const offsetof(Beacon.overlaps) sizeof(int) offset end
const sizeof(Beacon) reset end

proc Beacon.orig_x ptr -- ptr in offsetof(Beacon.orig_x) ptr+ end
proc Beacon.orig_y ptr -- ptr in offsetof(Beacon.orig_y) ptr+ end
proc Beacon.orig_z ptr -- ptr in offsetof(Beacon.orig_z) ptr+ end
proc Beacon.x ptr -- ptr in offsetof(Beacon.x) ptr+ end
proc Beacon.y ptr -- ptr in offsetof(Beacon.y) ptr+ end
proc Beacon.z ptr -- ptr in offsetof(Beacon.z) ptr+ end
proc Beacon.overlaps ptr -- ptr in offsetof(Beacon.overlaps) ptr+ end
proc @Beacon.orig_x ptr -- int in Beacon.orig_x @64 end
proc @Beacon.orig_y ptr -- int in Beacon.orig_y @64 end
proc @Beacon.orig_z ptr -- int in Beacon.orig_z @64 end
proc @Beacon.x ptr -- int in Beacon.x @64 end
proc @Beacon.y ptr -- int in Beacon.y @64 end
proc @Beacon.z ptr -- int in Beacon.z @64 end
proc @Beacon.overlaps ptr -- int in Beacon.overlaps @int end
proc !Beacon.orig_x int ptr in Beacon.orig_x !64 end
proc !Beacon.orig_y int ptr in Beacon.orig_y !64 end
proc !Beacon.orig_z int ptr in Beacon.orig_z !64 end
proc !Beacon.x int ptr in Beacon.x !64 end
proc !Beacon.y int ptr in Beacon.y !64 end
proc !Beacon.z int ptr in Beacon.z !64 end
proc !Beacon.overlaps int ptr in Beacon.overlaps !int end

const MAX_BEACONS 1000 end
memory beacons sizeof(Beacon) MAX_BEACONS * end
memory len(beacons) sizeof(int) end
proc beacons[i] int -- ptr in sizeof(Beacon) * beacons swap ptr+ end

proc init_beacon ptr in
  // TODO
  drop
end

proc new_beacon -- ptr in
  len(beacons) @64 MAX_BEACONS = if
    "Overflow in new_beacon\n" puts
    1 exit
  end
  beacons len(beacons) @64 sizeof(Beacon) * ptr+
  len(beacons) inc64
  dup init_beacon
end

proc dump_beacon ptr in
  "Beacon (" puts dup @Beacon.x putd "," puts dup @Beacon.y putd "," puts dup @Beacon.z putd ")" puts
  dup dup @Beacon.x swap @Beacon.orig_x != over dup @Beacon.y swap @Beacon.orig_y != lor over dup @Beacon.z swap @Beacon.orig_z != lor if
    " - was (" puts dup @Beacon.orig_x putd "," puts dup @Beacon.orig_y putd "," puts dup @Beacon.orig_z putd ")" puts
  end
  dup @Beacon.overlaps 0 > if " - OVERLAPS " puts dup @Beacon.overlaps 1 - putu end newline
  drop
end

const offsetof(Scanner.num) sizeof(int) offset end
const offsetof(Scanner.x) sizeof(int) offset end
const offsetof(Scanner.y) sizeof(int) offset end
const offsetof(Scanner.z) sizeof(int) offset end
const offsetof(Scanner.rot) sizeof(int) offset end
const offsetof(Scanner.beacons) sizeof(List) offset end
const offsetof(Scanner.found) sizeof(bool) offset end
const sizeof(Scanner) reset end

proc Scanner.num ptr -- ptr in offsetof(Scanner.num) ptr+ end
proc Scanner.x ptr -- ptr in offsetof(Scanner.x) ptr+ end
proc Scanner.y ptr -- ptr in offsetof(Scanner.y) ptr+ end
proc Scanner.z ptr -- ptr in offsetof(Scanner.z) ptr+ end
proc Scanner.rot ptr -- ptr in offsetof(Scanner.rot) ptr+ end
proc Scanner.beacons ptr -- ptr in offsetof(Scanner.beacons) ptr+ end
proc Scanner.found ptr -- ptr in offsetof(Scanner.found) ptr+ end
proc @Scanner.num ptr -- int in Scanner.num @64 end
proc @Scanner.x ptr -- int in Scanner.x @64 end
proc @Scanner.y ptr -- int in Scanner.y @64 end
proc @Scanner.z ptr -- int in Scanner.z @64 end
proc @Scanner.rot ptr -- int in Scanner.rot @64 end
proc @Scanner.found ptr -- bool in Scanner.found @bool end
proc !Scanner.num int ptr in Scanner.num !64 end
proc !Scanner.x int ptr in Scanner.x !64 end
proc !Scanner.y int ptr in Scanner.y !64 end
proc !Scanner.z int ptr in Scanner.z !64 end
proc !Scanner.rot int ptr in Scanner.rot !64 end
proc !Scanner.found bool ptr in Scanner.found !bool end

const MAX_SCANNERS 32 end
memory scanners sizeof(Scanner) MAX_SCANNERS * end
memory len(scanners) sizeof(int) end
proc scanners[i] int -- ptr in sizeof(Scanner) * scanners swap ptr+ end

proc init_scanner ptr in
  Scanner.beacons sizeof(ptr) swap list_init
end

proc new_scanner -- ptr in
  len(scanners) @64 MAX_SCANNERS = if
    "Overflow in new_scanner\n" puts
    1 exit
  end
  scanners len(scanners) @64 sizeof(Scanner) * ptr+
  len(scanners) inc64
  dup init_scanner
end

proc dump_scanner ptr in
  "Scanner " puts dup @Scanner.num putu ":\n" puts
  "  found: " puts dup @Scanner.found if "true" else "false" end puts newline
  "  loc: (" puts dup @Scanner.x putd "," puts dup @Scanner.y putd "," puts dup @Scanner.z putd ")\n" puts
  "  rot: " puts dup @Scanner.rot putd newline
  "  beacons:\n" puts
  0 while over over swap Scanner.beacons @List.count < do
    "    " puts dup putu " - " puts over over swap Scanner.beacons list_get cast(ptr) dump_beacon
    1 +
  end drop
  drop
end

proc parse_beacon  -- ptr in
  new_beacon
  ',' word line str-chop-by-delim
  word @Str try-parse-signed-int drop over over swap !Beacon.x over !Beacon.orig_x
  ',' word line str-chop-by-delim
  word @Str try-parse-signed-int drop over over swap !Beacon.y over !Beacon.orig_y
  line @Str try-parse-signed-int drop over over swap !Beacon.z over !Beacon.orig_z
end

proc parse_scanner -- ptr in
  new_scanner
  line input str-chop-line
  "--- scanner " drop line str-chop-n-left
  line @Str try-parse-int drop
  over over swap !Scanner.num
  0 = if // Only care about scanner 0. Can set location now
    true over !Scanner.found
    0 over !Scanner.x
    0 over !Scanner.y
    0 over !Scanner.z
  end
  while len(input) 0 = if false else line input str-chop-line len(line) 0 > end do
    parse_beacon cast(int) over Scanner.beacons list_add
  end
end

proc parse_input in
  read_stdin_to_str @Str input !Str
  while len(input) 0 > do
    parse_scanner drop
  end
end

proc rotate int ptr in // rotidx scanner
  memory s sizeof(ptr) end
  memory shuffles sizeof(int) end
  memory negatives sizeof(int) end
  memory b sizeof(ptr) end
  s !ptr
  dup s @ptr !Scanner.rot
  // rotate idx will be divmod by 4, div will get shuffling of vars, mod will give which is -ve
  // FIXME: should only need 4, see fixme's below
  8 divmod negatives !64 shuffles !64
//   x  y  z
       shuffles @64 1 = if
//   x  z  y
    s @ptr @Scanner.y s @ptr @Scanner.z
    s @ptr !Scanner.y
    s @ptr !Scanner.z
  else shuffles @64 2 = if*
//   y  x  z
    s @ptr @Scanner.x s @ptr @Scanner.y
    s @ptr !Scanner.x
    s @ptr !Scanner.y
  else shuffles @64 3 = if*
//   y  z  x
    s @ptr @Scanner.x s @ptr @Scanner.z s @ptr @Scanner.y
    s @ptr !Scanner.x
    s @ptr !Scanner.y
    s @ptr !Scanner.z
  else shuffles @64 4 = if*
//   z  y  x
    s @ptr @Scanner.x s @ptr @Scanner.z
    s @ptr !Scanner.x
    s @ptr !Scanner.z
  else shuffles @64 5 = if*
//   z  x  y
    s @ptr @Scanner.y s @ptr @Scanner.x s @ptr @Scanner.z
    s @ptr !Scanner.x
    s @ptr !Scanner.y
    s @ptr !Scanner.z
  end
       negatives @64 1 = if
    s @ptr @Scanner.x 0 1 - * s @ptr !Scanner.x
  else negatives @64 2 = if*
    s @ptr @Scanner.y 0 1 - * s @ptr !Scanner.y
  else negatives @64 3 = if*
    s @ptr @Scanner.z 0 1 - * s @ptr !Scanner.z
// FIXME: Should only need 4, but we only flip one axis, the example input requires 2 to be flipped
  else negatives @64 4 = if*
    s @ptr @Scanner.x 0 1 - * s @ptr !Scanner.x
    s @ptr @Scanner.y 0 1 - * s @ptr !Scanner.y
  else negatives @64 5 = if*
    s @ptr @Scanner.x 0 1 - * s @ptr !Scanner.x
    s @ptr @Scanner.z 0 1 - * s @ptr !Scanner.z
  else negatives @64 6 = if*
    s @ptr @Scanner.y 0 1 - * s @ptr !Scanner.y
    s @ptr @Scanner.z 0 1 - * s @ptr !Scanner.z
  else negatives @64 7 = if*
    s @ptr @Scanner.x 0 1 - * s @ptr !Scanner.x
    s @ptr @Scanner.y 0 1 - * s @ptr !Scanner.y
    s @ptr @Scanner.z 0 1 - * s @ptr !Scanner.z
  end
  0 while dup s @ptr Scanner.beacons @List.count < do
    dup s @ptr Scanner.beacons list_get cast(ptr) b !ptr
//   x  y  z
         shuffles @64 1 = if
//   x  z  y
      b @ptr @Beacon.y b @ptr @Beacon.z
      b @ptr !Beacon.y
      b @ptr !Beacon.z
    else shuffles @64 2 = if*
//   y  x  z
      b @ptr @Beacon.x b @ptr @Beacon.y
      b @ptr !Beacon.x
      b @ptr !Beacon.y
    else shuffles @64 3 = if*
//   y  z  x
      b @ptr @Beacon.x b @ptr @Beacon.z b @ptr @Beacon.y
      b @ptr !Beacon.x
      b @ptr !Beacon.y
      b @ptr !Beacon.z
    else shuffles @64 4 = if*
//   z  y  x
      b @ptr @Beacon.x b @ptr @Beacon.z
      b @ptr !Beacon.x
      b @ptr !Beacon.z
    else shuffles @64 5 = if*
//   z  x  y
      b @ptr @Beacon.y b @ptr @Beacon.x b @ptr @Beacon.z
      b @ptr !Beacon.x
      b @ptr !Beacon.y
      b @ptr !Beacon.z
    end
  //   x  y  z
  //  -x  y  z
  //   x -y  z
  //   x  y -z
  // FIXME: Should only need 4, but we only flip one axis, the example input requires 2 to be flipped
  // will just add to this, extra computation maybe, revisit later
  //  -x -y  z
  //  -x  y -z
  //   x -y -z
  //  -x -y -z
         negatives @64 1 = if
      b @ptr @Beacon.x 0 1 - * b @ptr !Beacon.x
    else negatives @64 2 = if*
      b @ptr @Beacon.y 0 1 - * b @ptr !Beacon.y
    else negatives @64 3 = if*
      b @ptr @Beacon.z 0 1 - * b @ptr !Beacon.z
  // FIXME: Should only need 4, but we only flip one axis, the example input requires 2 to be flipped
    else negatives @64 4 = if*
      b @ptr @Beacon.x 0 1 - * b @ptr !Beacon.x
      b @ptr @Beacon.y 0 1 - * b @ptr !Beacon.y
    else negatives @64 5 = if*
      b @ptr @Beacon.x 0 1 - * b @ptr !Beacon.x
      b @ptr @Beacon.z 0 1 - * b @ptr !Beacon.z
    else negatives @64 6 = if*
      b @ptr @Beacon.y 0 1 - * b @ptr !Beacon.y
      b @ptr @Beacon.z 0 1 - * b @ptr !Beacon.z
    else negatives @64 7 = if*
      b @ptr @Beacon.x 0 1 - * b @ptr !Beacon.x
      b @ptr @Beacon.y 0 1 - * b @ptr !Beacon.y
      b @ptr @Beacon.z 0 1 - * b @ptr !Beacon.z
    end
    1 +
  end drop
end

proc reset_scanner ptr in
  memory s sizeof(ptr) end
  memory b sizeof(ptr) end
  s !ptr
  0 s @ptr !Scanner.rot
  0 s @ptr !Scanner.x 0 s @ptr !Scanner.y 0 s @ptr !Scanner.z
  0 while dup s @ptr Scanner.beacons @List.count < do
    dup s @ptr Scanner.beacons list_get cast(ptr) b !ptr
    b @ptr @Beacon.orig_x b @ptr !Beacon.x
    b @ptr @Beacon.orig_y b @ptr !Beacon.y
    b @ptr @Beacon.orig_z b @ptr !Beacon.z
    1 +
  end drop
end

proc translate ptr ptr in // x y z scanner
  memory s sizeof(ptr) end
  memory x sizeof(int) end
  memory y sizeof(int) end
  memory z sizeof(int) end
  s !ptr
  dup @Beacon.z z !64 dup @Beacon.y y !64 dup @Beacon.x x !64 drop
  s @ptr Scanner.x x @64 inc64-by
  s @ptr Scanner.y y @64 inc64-by
  s @ptr Scanner.z z @64 inc64-by
  0 while dup s @ptr Scanner.beacons @List.count < do
    dup s @ptr Scanner.beacons list_get cast(ptr)
    dup Beacon.x x @64 inc64-by
    dup Beacon.y y @64 inc64-by
    dup Beacon.z z @64 inc64-by
    drop
    1 +
  end drop
end

proc beacons= ptr ptr -- bool in
  memory b1 sizeof(ptr) end
  memory b2 sizeof(ptr) end
  b2 !ptr b1 !ptr
  b1 @ptr @Beacon.x b2 @ptr @Beacon.x =
  b1 @ptr @Beacon.y b2 @ptr @Beacon.y = land
  b1 @ptr @Beacon.z b2 @ptr @Beacon.z = land
end

proc beacon_invert ptr ptr -- ptr in
  memory b sizeof(ptr) end
  b !ptr
  b @ptr @Beacon.x 0 1 - * over !Beacon.x
  b @ptr @Beacon.y 0 1 - * over !Beacon.y
  b @ptr @Beacon.z 0 1 - * over !Beacon.z
end

proc beacon_diff ptr ptr ptr -- ptr in
  memory b1 sizeof(ptr) end
  memory b2 sizeof(ptr) end
  b2 !ptr b1 !ptr
  b1 @ptr @Beacon.x b2 @ptr @Beacon.x - over !Beacon.x
  b1 @ptr @Beacon.y b2 @ptr @Beacon.y - over !Beacon.y
  b1 @ptr @Beacon.z b2 @ptr @Beacon.z - over !Beacon.z
end

proc count_overlaps ptr ptr -- int in
  memory s1 sizeof(ptr) end
  memory s2 sizeof(ptr) end
  s2 !ptr s1 !ptr
  0
  0 while dup s1 @ptr Scanner.beacons @List.count < do
    0 while dup s2 @ptr Scanner.beacons @List.count < do
      over s1 @ptr Scanner.beacons list_get cast(ptr)
      over s2 @ptr Scanner.beacons list_get cast(ptr)
      beacons= if rot 1 + rot rot drop s2 @ptr Scanner.beacons @List.count end
      1 +
    end drop
    1 +
  end drop
end

proc mark_overlaps ptr ptr in
  memory s1 sizeof(ptr) end
  memory s2 sizeof(ptr) end
  memory b1 sizeof(ptr) end
  memory b2 sizeof(ptr) end
  s2 !ptr s1 !ptr
  0 while dup s1 @ptr Scanner.beacons @List.count < do
    0 while dup s2 @ptr Scanner.beacons @List.count < do
      over s1 @ptr Scanner.beacons list_get cast(ptr) b1 !ptr
      dup s2 @ptr Scanner.beacons list_get cast(ptr) b2 !ptr
      b1 @ptr b2 @ptr beacons= if over 1 + b2 @ptr !Beacon.overlaps end
      1 +
    end drop
    1 +
  end drop
end

proc copy_beacon ptr ptr -- ptr in
  // dst src
  over over @Beacon.x swap !Beacon.x
  over over @Beacon.y swap !Beacon.y
  over over @Beacon.z swap !Beacon.z
  drop
end

memory diff_l sizeof(List) end
memory counts sizeof(List) end
sizeof(ptr) diff_l list_init
sizeof(int) counts list_init
proc common_diff ptr ptr ptr -- ptr int in
  memory s1 sizeof(ptr) end
  memory s2 sizeof(ptr) end
  memory b1 sizeof(ptr) end
  memory b2 sizeof(ptr) end
  s2 !ptr s1 !ptr
  tmp-end swap
  memory diffs sizeof(ptr) end
  sizeof(Beacon) s1 @ptr @List.count s2 @ptr @List.count * * tmp-alloc diffs !ptr
  0 while dup s1 @ptr Scanner.beacons @List.count < do
    0 while dup s2 @ptr Scanner.beacons @List.count < do
      over s1 @ptr Scanner.beacons list_get cast(ptr) b1 !ptr
      dup s2 @ptr Scanner.beacons list_get cast(ptr) b2 !ptr
      over s1 @ptr Scanner.beacons @List.count * over + sizeof(Beacon) * diffs @ptr +ptr b1 @ptr b2 @ptr beacon_diff drop
      1 +
    end drop
    1 +
  end drop
  // find counts of each diff
  0 diff_l !List.count
  0 counts !List.count
  memory found sizeof(bool) end
  0 while dup s1 @ptr Scanner.beacons @List.count s2 @ptr Scanner.beacons @List.count * < do
    dup sizeof(Beacon) * diffs @ptr +ptr b1 !ptr
    b1 @ptr @Beacon.x 0 != b1 @ptr @Beacon.y 0 != b1 @ptr @Beacon.z 0 != lor lor if
      false found !bool
      0 while dup diff_l @List.count < found @bool lnot land do
        dup diff_l list_get cast(ptr) b2 !ptr
        b1 @ptr b2 @ptr beacons= if
          true found !bool
          dup counts list_get 1 + over counts list_set
        end
        1 +
      end drop
      found @bool lnot if
        b1 @ptr cast(int) diff_l list_add
        1 counts list_add
      end
    end
    1 +
  end drop
  0 // ret max
  0 while over 12 < over counts @List.count < land do
    // ret idx count max
    dup counts list_get rot 2dup > if
      drop
      // max ret idx b
      rot rot dup diff_l list_get cast(ptr)
      // max idx ret
      rot swap copy_beacon
      rot rot
    else rot rot drop end // ret max idx
    1 +
  end drop
  rot tmp-rewind
end

proc overlaps ptr ptr -- bool in // s1 s2
  memory s1 sizeof(ptr) end
  memory s2 sizeof(ptr) end
  memory b1 sizeof(ptr) end
  memory b2 sizeof(ptr) end
  memory tmp sizeof(Beacon) end
  sizeof(Beacon) 0 tmp memset drop
  memory count sizeof(int) end
  s2 !ptr s1 !ptr
//  "Checking overlap\n" puts
//  s1 @ptr dump_scanner
//  s2 @ptr dump_scanner
  memory ret sizeof(bool) end
  false ret !bool
  // FIXME: should only need 24, but see fixme's in rotate for reasons
  0 while dup 48 < ret @bool lnot land do
    dup s2 @ptr rotate
    tmp s1 @ptr s2 @ptr common_diff 12 >= if
s2 @ptr @Scanner.num 19 = if dup dump_beacon tmp s1 @ptr s2 @ptr common_diff print dump_beacon end
      s2 @ptr translate
      s1 @ptr s2 @ptr mark_overlaps
      true s2 @ptr !Scanner.found
//          s1 @ptr dump_scanner
//          s2 @ptr dump_scanner
s2 @ptr @Scanner.num "Found scanner " puts print
      true ret !bool
    else
      drop
      s2 @ptr reset_scanner
    end
    1 +
  end drop
  ret @bool
end

proc solve -- int in
  memory s1 sizeof(ptr) end
  memory s2 sizeof(ptr) end
  memory ret sizeof(List) end
  sizeof(ptr) ret list_init
  memory found_count sizeof(int) end
  1 found_count !64 // 0 is found already
  0 while dup 0 scanners[i] Scanner.beacons @List.count < do
    dup 0 scanners[i] Scanner.beacons list_get ret list_add
    1 +
  end drop
  while found_count @64 len(scanners) @64 < do
    0 while dup len(scanners) @64 < do
      dup scanners[i] s1 !ptr
      s1 @ptr @Scanner.found if
        0 while dup len(scanners) @64 < do
          dup scanners[i] s2 !ptr
          s2 @ptr @Scanner.found lnot if
            s1 @ptr s2 @ptr overlaps if
              found_count inc64
              0 while dup s2 @ptr Scanner.beacons @List.count < do
                dup s2 @ptr Scanner.beacons list_get cast(ptr) dup @Beacon.overlaps 0 = if
                  // b1 found idx
                  false
                  0 while dup ret @List.count < do
                    rot over ret list_get cast(ptr) over over beacons= if
                      drop rot drop true rot
                    else
                      drop rot rot
                    end
                    1 +
                  end drop
                  lnot if
                    dup cast(int) ret list_add
//                  else "double overlap somewhere\n" puts dup dump_beacon
                  end
                end drop
                1 +
              end drop
            end
          end
          1 +
        end drop
      end
      1 +
    end drop
  end
//  0 while dup ret @List.count < do
//    dup ret list_get cast(ptr) dump_beacon
//    1 +
//  end drop
  ret @List.count
end

proc dump_scanners in
  0 while dup len(scanners) @64 < do
    dup scanners[i] dump_scanner
    1 +
  end drop
end

parse_input
//dump_scanners
solve print
dump_scanners
// 455 is too high
// 635 also too high
// 623 also too high
