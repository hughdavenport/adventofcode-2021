// This could be improved with dynamic programming
include "helpers.porth"

memory input sizeof(Str) end
memory line sizeof(Str) end
proc @line -- int ptr in line @Str end

const offsetof(Player.id) sizeof(int) offset end
const offsetof(Player.score) sizeof(int) offset end
const offsetof(Player.loc) sizeof(int) offset end
const sizeof(Player) reset end

proc Player.id ptr -- ptr in offsetof(Player.id) ptr+ end
proc Player.score ptr -- ptr in offsetof(Player.score) ptr+ end
proc Player.loc ptr -- ptr in offsetof(Player.loc) ptr+ end
proc @Player.id ptr -- int in Player.id @64 end
proc @Player.score ptr -- int in Player.score @64 end
proc @Player.loc ptr -- int in Player.loc @64 end
proc !Player.id int ptr in Player.id !64 end
proc !Player.score int ptr in Player.score !64 end
proc !Player.loc int ptr in Player.loc !64 end

memory players sizeof(Player) 2 * end
memory current_player sizeof(int) end
0 current_player !64
proc player -- ptr in players current_player @64 sizeof(Player) * ptr+ end
proc switch_players in current_player @64 1 + 2 % current_player !64 end

memory starting_game sizeof(ptr) end
const offsetof(Game.players) sizeof(Player) 2 * offset end
const offsetof(Game.multiplier) sizeof(int) offset end
const offsetof(Game.current_player) 1 offset end
const sizeof(Game) reset end

proc Game.players ptr -- ptr in offsetof(Game.players) ptr+ end
proc Game.current_player ptr -- ptr in offsetof(Game.current_player) ptr+ end
proc Game.multiplier ptr -- ptr in offsetof(Game.multiplier) ptr+ end
proc Game.player ptr -- ptr in dup Game.players over Game.current_player @8 sizeof(Player) * ptr+ swap drop end
proc Game.switch_players ptr in dup Game.current_player @8 1 + 2 % swap Game.current_player !8 end

proc new_game -- ptr in
  sizeof(Game) malloc
end

proc copy_game ptr -- ptr in
  new_game sizeof(Game) rot rot memcpy
end


proc parse_input in
  read_stdin_to_str @Str input !Str
  line input str-chop-line
  "Player 1 starting position: " drop line str-chop-n-left
  @line try-parse-int drop player !Player.loc
  1 player !Player.id
  switch_players
  line input str-chop-line
  "Player 2 starting position: " drop line str-chop-n-left
  @line try-parse-int drop player !Player.loc
  2 player !Player.id
  switch_players
  new_game
  dup Game.multiplier 1 swap !64
  sizeof(Player) 2 * over Game.players players swap memcpy drop
  starting_game !ptr
end

memory dice_rolls sizeof(int) end
memory last_roll sizeof(int) end
proc roll_die -- int in
  last_roll @64 0 = if
    1
  else
    last_roll @64 100 % 1 +
  end
  dup last_roll !64
  dice_rolls inc64
end

proc dump_player ptr in
  "id: " puts dup @Player.id putu ", loc: " puts dup @Player.loc putu ", score: " puts dup @Player.score putu
  newline
  drop
end

proc dump_game in
  "GAME DUMP\n" puts
  "Dice rolls: " puts dice_rolls @64 print
  "Last roll: " puts last_roll @64 print
  "Current player: " puts player dump_player
  switch_players
  "Opponent: " puts player dump_player
  switch_players
  newline
end

proc dump_quantum_game ptr in
  "QUANTUM GAME DUMP\n" puts
  "Multiplier: " puts dup Game.multiplier @64 print
  "Current player: " puts dup Game.player dump_player
  dup Game.switch_players
  "Opponent: " puts dup Game.player dump_player
  Game.switch_players
  newline
end


proc take_turn -- bool in
  player @Player.loc roll_die roll_die roll_die + + + 1 - 10 % 1 + player !Player.loc
  player Player.score player @Player.loc inc64-by
  player @Player.score 1000 >=
  switch_players
end

proc solve -- int in
  while take_turn lnot do end
  player @Player.score dice_rolls @64 *
end

proc player= ptr ptr -- bool in
  over @Player.loc over @Player.loc = rot rot @Player.score swap @Player.score = land
end

proc game= ptr ptr -- bool in
  over Game.players over Game.players over over player= rot rot sizeof(Player) ptr+ swap sizeof(Player) ptr+ player= land
  rot rot Game.current_player @8 swap Game.current_player @8 = land
end

memory current_games sizeof(List) end
sizeof(ptr) current_games list_init
memory next_current_games sizeof(List) end
memory wins sizeof(int) 2 * end
proc roll_dice_quantum int int ptr in // multiplier diceroll*3 game
  rot over Game.multiplier @64 * over Game.multiplier !64
  swap over Game.player @Player.loc + 1 - 10 % 1 + over Game.player !Player.loc
  dup Game.player Player.score over Game.player @Player.loc inc64-by
  dup Game.player @Player.score 21 >= if
    wins over Game.current_player @8 sizeof(int) * ptr+ over Game.multiplier @64 inc64-by
    dup free
  else
    dup Game.switch_players
    false swap
    0 while dup next_current_games @List.count < do
      over over next_current_games list_get cast(ptr) game= if
        over over next_current_games list_get cast(ptr) Game.multiplier swap Game.multiplier @64 inc64-by
        over free
        drop swap drop true swap next_current_games @List.count
      end
      1 +
    end drop
    swap lnot if
      dup cast(int) next_current_games list_add
    end
  end drop
end

proc take_turn_quantum ptr in
  dup copy_game 3 4 rot roll_dice_quantum
  dup copy_game 6 5 rot roll_dice_quantum
  dup copy_game 7 6 rot roll_dice_quantum
  dup copy_game 6 7 rot roll_dice_quantum
  dup copy_game 3 8 rot roll_dice_quantum
  dup copy_game 1 9 rot roll_dice_quantum
  1 3 rot roll_dice_quantum
end

proc solve_quantum -- int in
  starting_game @ptr cast(int) current_games list_add
  while current_games @List.count 0 > do
    sizeof(ptr) next_current_games list_init
    0 while dup current_games @List.count < do
      dup current_games list_get cast(ptr) take_turn_quantum
      1 +
    end drop
    sizeof(List) next_current_games current_games memcpy drop
  end
  wins @64 wins sizeof(int) ptr+ @64 max
end


parse_input
solve print
solve_quantum print
