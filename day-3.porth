include "helpers.porth"

memory count_ones sizeof(int) 12 * end // bitstring in input is 12 digits
memory height sizeof(int) end
memory width sizeof(int) end
memory gamma sizeof(int) end
memory epsilon sizeof(int) end
memory data sizeof(int) 12 * 1000 * end // input is 12*1000
memory ones sizeof(int) end
memory current_keep sizeof(ptr) 3 * end // store keep, len, tgt
memory oxy_keep sizeof(bool) 1000 * end // input has 1000 records
memory co2_keep sizeof(bool) 1000 * end // input has 1000 records
memory len(oxy_keep) sizeof(int) end
memory len(co2_keep) sizeof(int) end
memory oxy sizeof(int) end
memory co2 sizeof(int) end

1000 0 while 2dup > do
  true cast(int) over oxy_keep !a[i]
  true cast(int) over co2_keep !a[i]
  1 +
end drop drop

0 0
while eof? lnot do
  // x y
  next_char
  // x y digit
  dup '\n' = if
    // x y digit
    rot width !64 0 rot rot
    swap 1 + swap
  else dup '0' = if*
    // x y digit
    drop 2dup width @64 * + 0 swap data !a[i]
    // x y
    swap 1 + swap 0
    // x y digit
  else dup '1' = if*
    // x y digit
    drop 2dup width @64 * + 1 swap data !a[i]
    // x y
    swap
    dup count_ones a[i]++
    1 + swap 1
    // x y digit
  end drop
  // x y
end
swap drop
// y
width @64 0 while 2dup > do
  // y width idx
  rot
  // width idx y
  over count_ones @a[i]
  // width idx y ones
  over 2 / > if
    // width idx y
    gamma @64 2 * 1 + gamma !64
    epsilon @64 2 * epsilon !64
  else
    gamma @64 2 * gamma !64
    epsilon @64 2 * 1 + epsilon !64
  end
  // width idx y
  rot rot
  // y width idx
  1 +
end drop drop
// y

gamma @64 epsilon @64 * print

// y
dup len(oxy_keep) !64
dup len(co2_keep) !64
oxy_keep current_keep !ptr
len(oxy_keep) 1 sizeof(ptr) * current_keep +ptr !ptr
oxy 2 sizeof(ptr) * current_keep +ptr !ptr

// y
height !64
0 while dup 2 < do
  // outer
  dup 1 = if
    co2_keep current_keep !ptr
    len(co2_keep) 1 sizeof(ptr) * current_keep +ptr !ptr
    co2 2 sizeof(ptr) * current_keep +ptr !ptr
  end

  // outer
  0 while dup width @64 < do // for each digit
    // outer x
    0 ones !64
    0 while dup height @64 < do // for each line
      // outer x y
      dup current_keep @ptr @a[i] cast(bool) if // is it selected?
        // outer x y
        2dup width @64 * + data @a[i]
        // outer x y digit
        1 = if ones inc64 end
        // outer x y
      end
      1 +
      // outer x y
    end drop

    // outer x
    ones @64 1 sizeof(ptr) * current_keep +ptr @ptr @64 1 + 2 / >= if over else over 1 + 2 % end
    // outer x search
    over while dup height @64 width @64 * < do
      // outer x search idx
      dup width @64 / current_keep @ptr @a[i] cast(bool) if
        // outer x search idx
        over over data @a[i]
        // outer x search idx search digit
        = if
  	// outer x search idx
  	1 sizeof(ptr) * current_keep +ptr dup @ptr @64 1 - swap @ptr !64
  	false cast(int) over width @64 / current_keep @ptr !a[i]
        end
        // outer x search idx
      end
      width @64 +
      // outer x search idx
    end drop drop

    // outer x
    1 sizeof(ptr) * current_keep +ptr @ptr @64 1 = if
      // outer x
      0 while dup height @64 < do
        // outer x y
        dup current_keep @ptr @a[i] cast(bool) if
  	// outer x y
          dup width @64 * while 2dup swap 1 + width @64 * < do // each digit
            // outer x y idx
            dup data @a[i]
            // outer x y idx digit
            2 sizeof(ptr) * current_keep +ptr swap over @ptr @64 2 * + swap @ptr !64
            1 +
          end drop
        end
        1 +
        // outer x y
      end drop
      drop width @64
      // outer end_of_x (basically break inner)
    end

    1 +
    // outer x
  end drop

  1 +
  // outer
end drop

oxy @64 co2 @64 * print

